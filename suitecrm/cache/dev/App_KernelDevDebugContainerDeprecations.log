a:38:{i:0;a:6:{s:4:"type";i:16384;s:7:"message";s:259:"The "Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" class is considered final. It may change without further notice as of its next major version. You should not extend it from "App\Engine\Service\Extensions\ExtensionAssetCacheWarmupDecorator".";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:1;a:6:{s:4:"type";i:16384;s:7:"message";s:327:"Method "Symfony\Component\HttpKernel\CacheWarmer\WarmableInterface::warmUp()" might add "array" as a native return type declaration in the future. Do the same in implementation "App\Engine\Service\Extensions\ExtensionAssetCacheWarmupDecorator" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:2;a:6:{s:4:"type";i:16384;s:7:"message";s:292:"Method "Psr\Log\LoggerAwareInterface::setLogger()" might add "void" as a native return type declaration in the future. Do the same in implementation "App\Module\LegacyHandler\RecentlyViewed\AddRecentlyViewed" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:3;a:6:{s:4:"type";i:16384;s:7:"message";s:280:"Method "Psr\Log\LoggerAwareInterface::setLogger()" might add "void" as a native return type declaration in the future. Do the same in implementation "App\Process\LegacyHandler\LinkRelationHandler" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:4;a:6:{s:4:"type";i:16384;s:7:"message";s:281:"Method "Psr\Log\LoggerAwareInterface::setLogger()" might add "void" as a native return type declaration in the future. Do the same in implementation "App\Process\LegacyHandler\ResetPasswordHandler" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:5;a:6:{s:4:"type";i:16384;s:7:"message";s:282:"Method "Psr\Log\LoggerAwareInterface::setLogger()" might add "void" as a native return type declaration in the future. Do the same in implementation "App\Process\LegacyHandler\UnlinkRelationHandler" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:6;a:6:{s:4:"type";i:16384;s:7:"message";s:240:"The "Symfony\Component\Security\Http\Authenticator\JsonLoginAuthenticator" class is considered final. It may change without further notice as of its next major version. You should not extend it from "App\Security\AppJsonLoginAuthenticator".";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:7;a:6:{s:4:"type";i:8192;s:7:"message";s:246:"Return type of Symfony\Component\Security\Core\Exception\AuthenticationException::__wakeup() should either be compatible with Exception::__wakeup(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice";s:4:"file";s:84:"/var/www/suitecrm/vendor/symfony/security-core/Exception/AuthenticationException.php";s:4:"line";i:115;s:5:"trace";a:1:{i:0;a:4:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:284;s:4:"args";a:1:{i:0;s:83:"/var/www/suitecrm/vendor/symfony/security-core/Exception/AccountStatusException.php";}s:8:"function";s:7:"include";}}s:5:"count";i:1;}i:8;a:6:{s:4:"type";i:16384;s:7:"message";s:320:"Method "Symfony\Component\Security\Core\User\UserProviderInterface::loadUserByUsername()" might add "UserInterface" as a native return type declaration in the future. Do the same in implementation "App\Security\Ldap\AppLdapUserProvider" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:9;a:6:{s:4:"type";i:16384;s:7:"message";s:313:"Method "Symfony\Component\Security\Core\User\UserProviderInterface::refreshUser()" might add "UserInterface" as a native return type declaration in the future. Do the same in implementation "App\Security\Ldap\AppLdapUserProvider" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:10;a:6:{s:4:"type";i:16384;s:7:"message";s:279:"Method "Psr\Log\LoggerAwareInterface::setLogger()" might add "void" as a native return type declaration in the future. Do the same in implementation "App\Statistics\LegacyHandler\SubpanelDefault" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:11;a:6:{s:4:"type";i:16384;s:7:"message";s:286:"Method "Psr\Log\LoggerAwareInterface::setLogger()" might add "void" as a native return type declaration in the future. Do the same in implementation "App\UserPreferences\LegacyHandler\SaveUiPreferences" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:12;a:6:{s:4:"type";i:8192;s:7:"message";s:244:"Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice";s:4:"file";s:62:"/var/www/suitecrm/vendor/symfony/http-foundation/HeaderBag.php";s:4:"line";i:255;s:5:"trace";a:1:{i:0;a:4:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:284;s:4:"args";a:1:{i:0;s:70:"/var/www/suitecrm/vendor/symfony/http-foundation/ResponseHeaderBag.php";}s:8:"function";s:7:"include";}}s:5:"count";i:1;}i:13;a:6:{s:4:"type";i:8192;s:7:"message";s:216:"Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice";s:4:"file";s:62:"/var/www/suitecrm/vendor/symfony/http-foundation/HeaderBag.php";s:4:"line";i:265;s:5:"trace";a:1:{i:0;a:4:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:284;s:4:"args";a:1:{i:0;s:70:"/var/www/suitecrm/vendor/symfony/http-foundation/ResponseHeaderBag.php";}s:8:"function";s:7:"include";}}s:5:"count";i:1;}i:14;a:6:{s:4:"type";i:16384;s:7:"message";s:370:"Method "Symfony\Component\Security\Core\Authentication\AuthenticationManagerInterface::authenticate()" might add "TokenInterface" as a native return type declaration in the future. Do the same in implementation "Hslavich\OneloginSamlBundle\Security\Authentication\Provider\SamlProvider" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:15;a:6:{s:4:"type";i:16384;s:7:"message";s:366:"Method "Symfony\Component\Security\Core\Authentication\Provider\AuthenticationProviderInterface::supports()" might add "bool" as a native return type declaration in the future. Do the same in implementation "Hslavich\OneloginSamlBundle\Security\Authentication\Provider\SamlProvider" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:16;a:6:{s:4:"type";i:16384;s:7:"message";s:347:"Method "Symfony\Component\Security\Core\Authentication\Token\TokenInterface::getCredentials()" might add "mixed" as a native return type declaration in the future. Do the same in implementation "Hslavich\OneloginSamlBundle\Security\Authentication\Token\SamlToken" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:17;a:6:{s:4:"type";i:16384;s:7:"message";s:341:"Method "Symfony\Component\Security\Core\User\UserProviderInterface::loadUserByUsername()" might add "UserInterface" as a native return type declaration in the future. Do the same in implementation "Hslavich\OneloginSamlBundle\Security\User\SamlUserProvider" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:18;a:6:{s:4:"type";i:16384;s:7:"message";s:334:"Method "Symfony\Component\Security\Core\User\UserProviderInterface::refreshUser()" might add "UserInterface" as a native return type declaration in the future. Do the same in implementation "Hslavich\OneloginSamlBundle\Security\User\SamlUserProvider" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:19;a:6:{s:4:"type";i:16384;s:7:"message";s:327:"Method "Symfony\Component\Security\Core\User\UserProviderInterface::supportsClass()" might add "bool" as a native return type declaration in the future. Do the same in implementation "Hslavich\OneloginSamlBundle\Security\User\SamlUserProvider" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:75:"/var/www/suitecrm/vendor/symfony/config/Resource/ClassExistenceResource.php";s:4:"line";i:78;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:20;a:6:{s:4:"type";i:16384;s:7:"message";s:171:"Since api-platform/core 2.7: The Doctrine annotation ApiPlatform\Core\Annotation\ApiResource is deprecated, use the PHP attribute ApiPlatform\Metadata\ApiResource instead.";s:4:"file";s:62:"/var/www/suitecrm/vendor/api-platform/core/src/deprecation.php";s:4:"line";i:473;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:288;s:8:"function";s:9:"{closure}";}}s:5:"count";i:1;}i:21;a:6:{s:4:"type";i:8192;s:7:"message";s:265:"Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice";s:4:"file";s:83:"/var/www/suitecrm/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php";s:4:"line";i:134;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:68:"/var/www/suitecrm/vendor/symfony/http-foundation/Session/Session.php";s:4:"line";i:22;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:22;a:6:{s:4:"type";i:8192;s:7:"message";s:237:"Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice";s:4:"file";s:83:"/var/www/suitecrm/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php";s:4:"line";i:144;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:68:"/var/www/suitecrm/vendor/symfony/http-foundation/Session/Session.php";s:4:"line";i:22;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:23;a:6:{s:4:"type";i:8192;s:7:"message";s:250:"Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice";s:4:"file";s:68:"/var/www/suitecrm/vendor/symfony/http-foundation/Session/Session.php";s:4:"line";i:131;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:107:"/var/www/suitecrm/vendor/symfony/http-kernel/DependencyInjection/RegisterControllerArgumentLocatorsPass.php";s:4:"line";i:172;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:24;a:6:{s:4:"type";i:8192;s:7:"message";s:222:"Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice";s:4:"file";s:68:"/var/www/suitecrm/vendor/symfony/http-foundation/Session/Session.php";s:4:"line";i:141;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:107:"/var/www/suitecrm/vendor/symfony/http-kernel/DependencyInjection/RegisterControllerArgumentLocatorsPass.php";s:4:"line";i:172;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:25;a:6:{s:4:"type";i:16384;s:7:"message";s:264:"Since symfony/dependency-injection 5.1: The "Psr\Container\ContainerInterface" autowiring alias is deprecated. Define it explicitly in your app if you want to keep using it. It is being referenced by the "App\Security\Ldap\AppCheckLdapCredentialsListener" service.";s:4:"file";s:97:"/var/www/suitecrm/vendor/symfony/dependency-injection/Compiler/ResolveReferencesToAliasesPass.php";s:4:"line";i:68;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:97:"/var/www/suitecrm/vendor/symfony/dependency-injection/Compiler/ResolveReferencesToAliasesPass.php";s:4:"line";i:51;s:8:"function";s:15:"getDefinitionId";s:5:"class";s:77:"Symfony\Component\DependencyInjection\Compiler\ResolveReferencesToAliasesPass";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:26;a:6:{s:4:"type";i:16384;s:7:"message";s:149:"Since api-platform/core 2.7: The service "ApiPlatform\Core\Api\IdentifiersExtractor" is deprecated, use ApiPlatform\Api\IdentifiersExtractor instead.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/deprecation-contracts/function.php";s:4:"line";i:25;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:80:"/var/www/suitecrm/vendor/api-platform/core/src/Core/Api/IdentifiersExtractor.php";s:4:"line";i:49;s:8:"function";s:19:"trigger_deprecation";}}s:5:"count";i:1;}i:27;a:6:{s:4:"type";i:16384;s:7:"message";s:205:"Since api-platform/core 2.7: Use "ApiPlatform\Metadata\Resource\Factory\ResourceMetadataCollectionFactoryInterface" instead of "ApiPlatform\Core\Metadata\Resource\Factory\ResourceMetadataFactoryInterface".";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/deprecation-contracts/function.php";s:4:"line";i:25;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:76:"/var/www/suitecrm/vendor/api-platform/core/src/Symfony/Routing/ApiLoader.php";s:4:"line";i:74;s:8:"function";s:19:"trigger_deprecation";}}s:5:"count";i:1;}i:28;a:6:{s:4:"type";i:16384;s:7:"message";s:249:"Since symfony/framework-bundle 5.1: Using type "Symfony\Component\Routing\RouteCollectionBuilder" for argument 1 of method "App\Kernel:configureRoutes()" is deprecated, use "Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator" instead.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/deprecation-contracts/function.php";s:4:"line";i:25;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:77:"/var/www/suitecrm/vendor/symfony/framework-bundle/Kernel/MicroKernelTrait.php";s:4:"line";i:188;s:8:"function";s:19:"trigger_deprecation";}}s:5:"count";i:1;}i:29;a:6:{s:4:"type";i:16384;s:7:"message";s:183:"Since symfony/routing 5.1: The "Symfony\Component\Routing\RouteCollectionBuilder" class is deprecated, use "Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator" instead.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/deprecation-contracts/function.php";s:4:"line";i:25;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/routing/RouteCollectionBuilder.php";s:4:"line";i:19;s:8:"function";s:19:"trigger_deprecation";}}s:5:"count";i:1;}i:30;a:6:{s:4:"type";i:16384;s:7:"message";s:329:"Method "Slim\Interfaces\InvocationStrategyInterface::__invoke()" might add "ResponseInterface|string" as a native return type declaration in the future. Do the same in implementation "Api\V8\Controller\InvocationStrategy\SuiteInvocationStrategy" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:295;s:8:"function";s:10:"checkClass";s:5:"class";s:47:"Symfony\Component\ErrorHandler\DebugClassLoader";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:31;a:6:{s:4:"type";i:16384;s:7:"message";s:292:"Method "League\OAuth2\Server\Entities\UserEntityInterface::getIdentifier()" might add "mixed" as a native return type declaration in the future. Do the same in implementation "Api\V8\OAuth2\Entity\UserEntity" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:295;s:8:"function";s:10:"checkClass";s:5:"class";s:47:"Symfony\Component\ErrorHandler\DebugClassLoader";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:32;a:6:{s:4:"type";i:16384;s:7:"message";s:275:"Method "Psr\Log\LoggerAwareInterface::setLogger()" might add "void" as a native return type declaration in the future. Do the same in implementation "SuiteCRM\API\v8\Controller\ApiController" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:295;s:8:"function";s:10:"checkClass";s:5:"class";s:47:"Symfony\Component\ErrorHandler\DebugClassLoader";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:33;a:6:{s:4:"type";i:16384;s:7:"message";s:329:"Method "Slim\Interfaces\InvocationStrategyInterface::__invoke()" might add "ResponseInterface|string" as a native return type declaration in the future. Do the same in implementation "Api\V8\Controller\InvocationStrategy\SuiteInvocationStrategy" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:295;s:8:"function";s:10:"checkClass";s:5:"class";s:47:"Symfony\Component\ErrorHandler\DebugClassLoader";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:34;a:6:{s:4:"type";i:16384;s:7:"message";s:292:"Method "League\OAuth2\Server\Entities\UserEntityInterface::getIdentifier()" might add "mixed" as a native return type declaration in the future. Do the same in implementation "Api\V8\OAuth2\Entity\UserEntity" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:295;s:8:"function";s:10:"checkClass";s:5:"class";s:47:"Symfony\Component\ErrorHandler\DebugClassLoader";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:35;a:6:{s:4:"type";i:16384;s:7:"message";s:171:"Since api-platform/core 2.7: The Doctrine annotation ApiPlatform\Core\Annotation\ApiResource is deprecated, use the PHP attribute ApiPlatform\Metadata\ApiResource instead.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/deprecation-contracts/function.php";s:4:"line";i:25;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:62:"/var/www/suitecrm/vendor/api-platform/core/src/deprecation.php";s:4:"line";i:473;s:8:"function";s:19:"trigger_deprecation";}}s:5:"count";i:1;}i:36;a:6:{s:4:"type";i:16384;s:7:"message";s:275:"Method "Psr\Log\LoggerAwareInterface::setLogger()" might add "void" as a native return type declaration in the future. Do the same in implementation "SuiteCRM\API\v8\Controller\ApiController" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:325;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:295;s:8:"function";s:10:"checkClass";s:5:"class";s:47:"Symfony\Component\ErrorHandler\DebugClassLoader";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:37;a:6:{s:4:"type";i:8192;s:7:"message";s:246:"Return type of Symfony\Component\Security\Core\Exception\AuthenticationException::__wakeup() should either be compatible with Exception::__wakeup(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice";s:4:"file";s:84:"/var/www/suitecrm/vendor/symfony/security-core/Exception/AuthenticationException.php";s:4:"line";i:115;s:5:"trace";a:3:{i:0;a:5:{s:4:"file";s:84:"/var/www/suitecrm/vendor/symfony/security-core/Exception/AuthenticationException.php";s:4:"line";i:22;s:8:"function";s:50:"Symfony\Component\HttpKernel\CacheWarmer\{closure}";s:5:"class";s:61:"Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate";s:4:"type";s:2:"->";}i:1;a:4:{s:4:"file";s:67:"/var/www/suitecrm/vendor/symfony/error-handler/DebugClassLoader.php";s:4:"line";i:284;s:4:"args";a:1:{i:0;s:84:"/var/www/suitecrm/vendor/symfony/security-core/Exception/AuthenticationException.php";}s:8:"function";s:7:"include";}i:2;a:5:{s:4:"file";s:83:"/var/www/suitecrm/vendor/symfony/security-core/Exception/AccountStatusException.php";s:4:"line";i:23;s:8:"function";s:9:"loadClass";s:5:"class";s:47:"Symfony\Component\ErrorHandler\DebugClassLoader";s:4:"type";s:2:"->";}}s:5:"count";i:1;}}